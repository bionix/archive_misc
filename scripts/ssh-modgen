#!/bin/sh

usage() {
    echo "Generate moduli file for SSH Diffie-Hellman group exchange (DH-GEX)."
    echo
    echo "Usage:"
    echo "    Write to a file             $0 output_file bit_len [bit_len...]"
    echo "    Write to stdout             $0 - bit_len [bit_len...]"
    echo "    Write to a file called '-'  $0 ./- bit_len [bit_len...]"
    echo "    '$0' is equivalent to '$0 $defaults'"
    echo "    '$0 x' is equivalent to '$0 x $default_bitlens'"
    echo
    echo "Bit lengths must be integers not less than 2048."
}

for arg in $*; do
    if [ "$arg" = '--help' ] || [ "$arg" = '-h' ]; then
        usage
        exit 0
    fi
done

# Handle default arguments.
default_bitlens="2048 3072 4096 5120 6144 7168 8192 16384"
defaults="/etc/ssh/moduli ${default_bitlens}"
if [ $# -eq 0 ]; then
    exec "$0" $defaults
elif [ $# -eq 1 ]; then
    exec "$0" "$1" $default_bitlens
fi

set -o errexit
#set -o pipefail

umask 077

error() {
    echo "ERROR! $*" >&2
}

warn() {
    echo "WARNING! $*" >&2
}

random() {
    head -c 8 /dev/urandom | od -A n -t x8 | tr ' ' .
}

all_unsafe_primes=""
all_safe_primes=""
cleanup() {
    set +o errexit
    # There is a race condition here but it's better than leaving ssh-keygen
    # processes running. If jobs returns a PID that exits and gets reused before
    # we actually kill it, then we may kill the wrong process.
    jobs -p | xargs kill -15 && sleep 1 && jobs -p | xargs kill -9
    rm -f $all_unsafe_primes $all_safe_primes
}

# Determine where to write the output.
out="$1"
if [ "$1" != '-' ]; then
    if [ -d "$1" ]; then
        out="${1}/moduli"
        if [ -d "${1}/moduli" ]; then
            out="${1}$(random)"
            warn "${1} and ${1}/moduli are both direcories."
            warn "Output will be written to ${out}."
        fi
    fi
    dir="$(dirname "$out")"
    if [ -e "$out" ] && [ ! -f "$out" ] && [ ! -w "$out" ]; then
        warn "${out} is not writeable."
        warn "This process will take a long time then probably fail."
    elif [ ! -d "$dir" ] || [ ! -w "$dir" ]; then
        warn "${dir} is not a writeable directory."
        warn "This process will take a long time then probably fail."
    fi
fi

# Run ssh-keygen processes in parallel.
#
# ssh-keygen -G --> ssh-keygen -T --.
# ssh-keygen -G --> ssh-keygen -T --|
# ... ... ... ... ... ... ... ...   |--> output
# ssh-keygen -G --> ssh-keygen -T --|
# ssh-keygen -G --> ssh-keygen -T --'
shift
for bit_len in $*; do
    if [ "$bit_len" -lt 2048 ] || ( echo "$bit_len" | egrep -qv '^[0-9]+$' ); then
        error "Bit lengths must be integers not less than 2048."
        exit 1
    fi

    unsafe_primes="/tmp/moduli.${bit_len}.unsafe$(random)"
    safe_primes="/tmp/moduli.${bit_len}.safe$(random)"
    all_unsafe_primes="${all_unsafe_primes} ${unsafe_primes}"
    all_safe_primes="${all_safe_primes} ${safe_primes}"

    mkfifo "$unsafe_primes"
    trap cleanup EXIT
    ssh-keygen -G "$unsafe_primes" -b "$bit_len" >&2 &
    ssh-keygen -T "$safe_primes" -f "$unsafe_primes" >&2 &
done

# Output all safe primes in an atomic way if needed.
wait
if [ "$out" = '-' ]; then
    cat $all_safe_primes
elif [ ! -e "$out" ] || [ -f "$out" ]; then
    temp="${out}.uncommitted$(random)"
    cat $all_safe_primes > "$temp"
    mv "$temp" "$out"
else
    cat $all_safe_primes > "$out"
fi
